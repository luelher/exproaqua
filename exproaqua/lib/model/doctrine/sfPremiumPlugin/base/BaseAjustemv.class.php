<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Ajustemv', 'premium');

/**
 * BaseAjustemv
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $id_empresa
 * @property string $agencia
 * @property string $documento
 * @property string $codigo
 * @property string $id
 * @property string $nombre
 * @property float $costopromfecha
 * @property float $costounit
 * @property float $exfisica
 * @property float $exreal
 * @property float $exdiferenc
 * @property float $perdida
 * @property float $utilidad
 * @property string $lote
 * 
 * @method string   getIdEmpresa()      Returns the current record's "id_empresa" value
 * @method string   getAgencia()        Returns the current record's "agencia" value
 * @method string   getDocumento()      Returns the current record's "documento" value
 * @method string   getCodigo()         Returns the current record's "codigo" value
 * @method string   getId()             Returns the current record's "id" value
 * @method string   getNombre()         Returns the current record's "nombre" value
 * @method float    getCostopromfecha() Returns the current record's "costopromfecha" value
 * @method float    getCostounit()      Returns the current record's "costounit" value
 * @method float    getExfisica()       Returns the current record's "exfisica" value
 * @method float    getExreal()         Returns the current record's "exreal" value
 * @method float    getExdiferenc()     Returns the current record's "exdiferenc" value
 * @method float    getPerdida()        Returns the current record's "perdida" value
 * @method float    getUtilidad()       Returns the current record's "utilidad" value
 * @method string   getLote()           Returns the current record's "lote" value
 * @method Ajustemv setIdEmpresa()      Sets the current record's "id_empresa" value
 * @method Ajustemv setAgencia()        Sets the current record's "agencia" value
 * @method Ajustemv setDocumento()      Sets the current record's "documento" value
 * @method Ajustemv setCodigo()         Sets the current record's "codigo" value
 * @method Ajustemv setId()             Sets the current record's "id" value
 * @method Ajustemv setNombre()         Sets the current record's "nombre" value
 * @method Ajustemv setCostopromfecha() Sets the current record's "costopromfecha" value
 * @method Ajustemv setCostounit()      Sets the current record's "costounit" value
 * @method Ajustemv setExfisica()       Sets the current record's "exfisica" value
 * @method Ajustemv setExreal()         Sets the current record's "exreal" value
 * @method Ajustemv setExdiferenc()     Sets the current record's "exdiferenc" value
 * @method Ajustemv setPerdida()        Sets the current record's "perdida" value
 * @method Ajustemv setUtilidad()       Sets the current record's "utilidad" value
 * @method Ajustemv setLote()           Sets the current record's "lote" value
 * 
 * @package    exproaqua
 * @subpackage model
 * @author     Luis HernÃ¡ndez
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseAjustemv extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('ajustemv');
        $this->hasColumn('id_empresa', 'string', 6, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => false,
             'length' => '6',
             ));
        $this->hasColumn('agencia', 'string', 3, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => false,
             'length' => '3',
             ));
        $this->hasColumn('documento', 'string', 8, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => false,
             'length' => '8',
             ));
        $this->hasColumn('codigo', 'string', 25, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => false,
             'length' => '25',
             ));
        $this->hasColumn('id', 'string', 12, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => false,
             'length' => '12',
             ));
        $this->hasColumn('nombre', 'string', 80, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => ' ',
             'notnull' => false,
             'autoincrement' => false,
             'length' => '80',
             ));
        $this->hasColumn('costopromfecha', 'float', 20, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.0000000',
             'notnull' => true,
             'autoincrement' => false,
             'length' => '20',
             ));
        $this->hasColumn('costounit', 'float', 20, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.0000000',
             'notnull' => true,
             'autoincrement' => false,
             'length' => '20',
             ));
        $this->hasColumn('exfisica', 'float', 20, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.0000000',
             'notnull' => true,
             'autoincrement' => false,
             'length' => '20',
             ));
        $this->hasColumn('exreal', 'float', 20, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.0000000',
             'notnull' => true,
             'autoincrement' => false,
             'length' => '20',
             ));
        $this->hasColumn('exdiferenc', 'float', 20, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.0000000',
             'notnull' => true,
             'autoincrement' => false,
             'length' => '20',
             ));
        $this->hasColumn('perdida', 'float', 20, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.0000000',
             'notnull' => true,
             'autoincrement' => false,
             'length' => '20',
             ));
        $this->hasColumn('utilidad', 'float', 20, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.0000000',
             'notnull' => true,
             'autoincrement' => false,
             'length' => '20',
             ));
        $this->hasColumn('lote', 'string', 30, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => ' ',
             'notnull' => false,
             'autoincrement' => false,
             'length' => '30',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}